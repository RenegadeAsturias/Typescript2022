https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Functions/rest_parameters


Parámetros Rest

La sintaxis de los parámetros rest nos permiten representar un número indefinido de argumentos como un array.

function sum(...theArgs) {
  return theArgs.reduce((previous, current) => {
    return previous + current;
  });
}

console.log(sum(1, 2, 3));
// expected output: 6

console.log(sum(1, 2, 3, 4));
// expected output: 10

Sintaxis

function(a, b, ...theArgs) {
  // ...
}

Descripción

El último parámetro de una función se puede prefijar con ..., lo que hará que todos los argumentos restantes (suministrados por el usuario) 
se coloquen dentro de un array de javascript "estándar".

Sólo el último parámetro puede ser un "parámetro rest".

function myFun(a, b, ...manyMoreArgs) {
  console.log("a", a);
  console.log("b", b);
  console.log("manyMoreArgs", manyMoreArgs);
}

myFun("one", "two", "three", "four", "five", "six");

// Console Output:
// a, one
// b, two
// manyMoreArgs, [three, four, five, six]

Diferencia entre los parámetros rest y el objeto arguments

Hay tres principales diferencias entre los parámetros rest y el objeto arguments:

    los parámetros rest son sólo aquellos a los que no se les ha asignado un nombre, mientras que el objeto arguments contiene todos los argumentos que se le han pasado a la función;
    el objeto arguments no es un array real, mientras que los parámetros rest son instancias de  Array , lo que significa que lo los métodos como sort, map, forEach o pop pueden aplicarse directamente;
    el objeto arguments tiene una funcionalidad adicional específica para sí mismo (como la propiedad callee).

De argumentos a array

Los parámetros rest han sido agregados para reducir el código repetitivo que se usaba en los parámetros.

Desestructuración de los parametros rest

Los parámetros rest pueden ser desestructurados, eso significa que sus datos pueden ser desempaquetados dentro de distintas variables. Ver Destructuring assignment.

function f(...[a, b, c]) {
  return a + b + c;
}

f(1)          // NaN (b y c son indefinidos)
f(1, 2, 3)    // 6
f(1, 2, 3, 4) // 6 (el cuarto parámetro no está desestructurado)





